{
    "name": "Numeri\u010dki algoritmi (2019\/2020), Zada\u0107a 3, zadatak 2",
    "language": "C++",
    "required_compiler": "g++",
    "preferred_compiler": "g++",
    "compiler_features": [],
    "compiler_options": "-std=c++11 -O1 -Wall -Wuninitialized -Winit-self -Wfloat-equal -Wno-sign-compare -Werror=implicit-function-declaration -Werror=vla -pedantic -lm -pass-exit-codes",
    "compiler_options_debug": "-std=c++11 -ggdb -lm -pass-exit-codes",
    "compile": "true",
    "run": "false",
    "test": "true",
    "debug": "true",
    "profile": "true",
    "test_specifications": [
        {
            "id": 276,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT1 - Limit test: Limes (tan(x)-sin(x))\/(x*x*x) x->0:\nauto limes = Limit([](double x) {return (std::tan(x)-std::sin(x))\/(x*x*x);},0);\nstd::cout<<limes.first<<\" \"<<limes.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "0.5 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 277,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\t\n\/\/AT2 - Limit test: Limes (sin(x))\/(x) x->0:\nauto limes = Limit([](double x) {return std::sin(x)\/x;},0);\nstd::cout<<limes.first<<\" \"<<limes.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 278,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\t\n\/\/AT3 - Limit test: Limes ln(x)\/(x-1) x->1:\nauto limes = Limit([](double x) {return std::log(x)\/(x-1);},1);\nstd::cout<<limes.first<<\" \"<<limes.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 279,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\t\n\/\/AT4 - Limit test: Limes (exp(x)-1)\/x x->0:\nauto limes = Limit([](double x) {return (std::exp(x)-1)\/x;},0);\nstd::cout<<limes.first<<\" \"<<limes.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 280,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT5 - Limit - Nije dostignuta ta\u010dnost\nauto limes = Limit([](double x) {return std::pow(x,1.\/3);},0,0,1e-12,4);\nstd::cout<<limes.first<<\" \"<<limes.second;\n\n",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "0.0325429 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 281,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT6 - Bacanje izuzetaka limit\ntry\n{\n    auto limes = Limit([](double x) {return std::pow(x,1.\/3);},0,0,1e-12,2);\n    \/\/Invalid parameters\n}\ncatch (std::domain_error e)\n{\n    std::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\n    std::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Invalid parameters'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 282,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT7 - Bacanje izuzetaka limit\ntry\n{\n    auto limes = Limit([](double x) {return std::pow(x,1.\/3);},0,0,1e-12,50);\n    \/\/Invalid parameters\n}\ncatch (std::domain_error e)\n{\n    std::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\n    std::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Invalid parameters'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 283,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT8 - Bacanje izuzetaka limit\ntry\n{\n    auto limes = Limit([](double x) {return std::pow(x,1.\/3);},0,0,0,5);\n    \/\/Invalid parameters\n}\ncatch (std::domain_error e)\n{\n    std::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\n    std::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Invalid parameters'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 284,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT9 - Bacanje izuzetaka limit\ntry\n{\n    auto limes = Limit([](double x) {return std::pow(x,1.\/3);},0,0,-10,5);\n    \/\/Invalid parameters\n}\ncatch (std::domain_error e)\n{\n    std::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\n    std::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Invalid parameters'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 285,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT10 - Limit test: Limes atan(x) x->inf:\ndouble inf = std::numeric_limits<double>::infinity();\nauto limes=Limit([](double x) { return atan(x); }, inf);\nstd::cout<<limes.first<<\" \"<<limes.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1.5708 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 286,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT11 - Limit test: Limes atan(x) x->-inf:\ndouble inf = std::numeric_limits<double>::infinity();\nauto limes =  Limit([](double x) { return atan(x); }, -inf);\nstd::cout<<limes.first<<\" \"<<limes.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-1.5708 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 287,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT12- Limit test: Limes atan(1\/x) x->0, h=1:\nauto limes = Limit([](double x) { return atan(1 \/ x); }, 0, 1);\nstd::cout<<limes.first<<\" \"<<limes.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1.5708 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 288,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT13- Limit test: Limes atan(1\/x) x->0, h=-1:\nauto limes = Limit([](double x) { return atan(1 \/ x); }, 0, -1);\nstd::cout<<limes.first<<\" \"<<limes.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-1.5708 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 289,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT14 - Provjera koraka h Limit\nauto limes=  Limit([](double x) { return sin(x) \/ x; }, 0, 0, 1e-15, 8);\nstd::cout<<limes.first<<\" \"<<limes.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        }
    ]
}