{
    "name": "Numeri\u010dki algoritmi (2019\/2020), Zada\u0107a 4, zadatak 2",
    "language": "C++",
    "required_compiler": "g++",
    "preferred_compiler": "g++",
    "compiler_features": [],
    "compiler_options": "-std=c++11 -O1 -Wall -Wuninitialized -Winit-self -Wfloat-equal -Wno-sign-compare -Werror=implicit-function-declaration -Werror=vla -pedantic -lm -pass-exit-codes",
    "compiler_options_debug": "-std=c++11 -ggdb -lm -pass-exit-codes",
    "compile": "true",
    "run": "false",
    "test": "true",
    "debug": "true",
    "profile": "true",
    "test_specifications": [
        {
            "id": 125,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT1 - Romberg integration - 1\nconst double PIPI1 = 4 * std::atan(1);\nauto sinf1 = [](double x) { return std::sin(x); };\nauto rig = RombergIntegration(sinf1, 0, PIPI1);\nstd::cout << rig.first << \" \" << rig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "2 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 126,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT2 - Romberg integration - 2\nauto inv1 = [](double x) { return 1 \/ x; };\nauto rig = RombergIntegration(inv1, 1, 2);\nstd::cout << rig.first << \" \" << rig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "0.693147 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 127,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT3 - Romberg integration - 3\nauto invsq1 = [](double x) { return x == 0 ? 0 : 1 \/ std::sqrt(x); };\nauto rig = RombergIntegration(invsq1, 0, 1);\nstd::cout << rig.first << \" \" << rig.second<< std::endl;\nrig = RombergIntegration(invsq1, 0, 1, 1e-8, 100000000);\nstd::cout << rig.first << \" \" << rig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1.99832 0\\n1.99985 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 128,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT4 - Romberg integration - 4\nauto sinc2 = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto rig =  RombergIntegration(sinc2, 0, 1e8);\nstd::cout << rig.first << \" \" << rig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "59.08 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 129,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT5 - Romberg integration - 5\nauto sinc3 = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto rig =  RombergIntegration(sinc3, 0, 1e8, 1e-8, 10000000);\nstd::cout << rig.first << \" \" << rig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "2.2566 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 130,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT6 -  Rombergintegration - Izuzetak 1\ntry\n{\nauto sinc3 = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto rig =  RombergIntegration(sinc3, 0, 1e8, -10, 10000000);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 131,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT7 -  Rombergintegration - Izuzetak 2\ntry\n{\nauto sinc3 = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto rig =  RombergIntegration(sinc3, 0, 1e8, 1e-8, -500, 1500);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 132,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT8 -  Rombergintegration - Izuzetak 3\ntry\n{\nauto sinc3 = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto rig =  RombergIntegration(sinc3, 0, 1e8, 1e-8, 10000, -1500);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 133,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT9 -  Rombergintegration - Izuzetak 4\ntry\n{\nauto sinc3 = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto rig =  RombergIntegration(sinc3, 0, 1e8, 1e-8, 10000,1000000);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 134,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT10 - Adaptive integration - 1\nconst double PIPI = 4 * std::atan(1);\nauto sinf = [](double x) { return std::sin(x); };\nauto aig = AdaptiveIntegration(sinf, 0, PIPI);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "2 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 135,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT11 - Adaptive integration - 2\nauto inv = [](double x) { return 1 \/ x; };\nauto aig = AdaptiveIntegration(inv, 1, 2);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "0.693147 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 136,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT12 - Adaptive integration - 3\nauto invsq = [](double x) { return x == 0 ? 0 : 1 \/ std::sqrt(x); };\nauto aig =  AdaptiveIntegration(invsq, 0, 1);\nstd::cout << aig.first << \" \" << aig.second << std::endl;\naig =  AdaptiveIntegration(invsq, 0, 1, 1e-8, 50);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1.99998 0\\n2 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 137,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT13 - Adaptive integration - 4\nauto sinc = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto aig =  AdaptiveIntegration(sinc, 0, 1e8, 1e-10, 23);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1.5708 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 138,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT14 - Adaptive integration - 5\nauto sinc1 = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto aig =  AdaptiveIntegration(sinc1, 0, 1e8, 1e-10, 20);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "6.80678 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 139,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT15 - Adaptive integration - 6\nauto aig =  AdaptiveIntegration([](double x) { return 1 \/ std::sqrt(x); }, 0, 1, 1e-6, 40);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "2 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 140,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT16 - Adaptive integration - 7\nauto aig =  AdaptiveIntegration([](double x) { return std::log(std::abs(x-1.372)); }, 0, 2, 1e-6, 40);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-1.85823 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 141,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT17 - Adaptive integration - 8\nauto aig =  AdaptiveIntegration([](double x) { return std::log(std::abs(x-1)); }, 0, 2, 1e-6, 40);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-2 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 142,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT18 - Adaptive integration - 9\nauto aig =  AdaptiveIntegration([](double x) { return std::log(std::abs(x-1)); }, 0, 2, 1e-8, 15);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-1.99986 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 143,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT19 - Adaptive integration - 10\nauto aig =  AdaptiveIntegration([](double x) { return std::log(std::abs(x-1)); }, 0, 2, 1e-8,22);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-2 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 144,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT20 - Adaptive integration - 11\nauto aig =  AdaptiveIntegration([](double x) { return std::log(std::abs(x-1)); }, 0, 2, 1e-8,35);\nstd::cout << aig.first << \" \" << aig.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-2 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 145,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT21 -  Adaptiveintegration - Izuzetak 1\ntry\n{\nauto sinc3 = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto aig = AdaptiveIntegration(sinc3, 0, 1e8, -5);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 146,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT22 -  Adaptiveintegration - Izuzetak 2\ntry\n{\nauto sinc3 = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto aig = AdaptiveIntegration(sinc3, 0, 1e8, 1e-8,-20);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 147,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT23 -  Adaptiveintegration - Izuzetak 3\ntry\n{\nauto sinc3 = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto aig = AdaptiveIntegration(sinc3, 0, 1e8, 1e-8,30,-5);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 148,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT24 - TanhSinh integration - 1\nauto rez = TanhSinhIntegration([](double x) { return std::log(std::abs(x-1.372)); }, 0, 2, 1e-5, 2000000);\n  std::cout << rez.first << \" \" << rez.second;;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-1.85823 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 149,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT25 - TanhSinh integration - 2\nconst double PIPI1 = 4 * std::atan(1);\nauto sinf = [](double x) { return std::sin(x); };\nauto rez = TanhSinhIntegration(sinf, 0, PIPI1);\nstd::cout << rez.first << \" \" << rez.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "2 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 150,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT26 - TanhSinh integration - 3\nauto sinc = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto rez = TanhSinhIntegration(sinc, 0, 1);\nstd::cout << rez.first << \" \" << rez.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "0.946083 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 151,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT27 - TanhSinh integration - 4\nauto rez = TanhSinhIntegration([](double x) { return std::log(x); }, 0, 1);\nstd::cout << rez.first << \" \" << rez.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-1 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 152,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT28 - TanhSinh integration - 5\nauto sinc = [](double x) { return x == 0 ? 1 : std::sin(x) \/ x; };\nauto rez = TanhSinhIntegration(sinc, 0, 1e8, 1e-8, 10000000, 3.5);\nstd::cout << rez.first << \" \" << rez.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1.56713 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 153,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT29 - TanhSinh integration - 6\nauto sinc = [](double x) { return std::sin(x) \/ x; };\nauto rez = TanhSinhIntegration(sinc, 0, 1e8, 1e-8, 10000000, 3.5);\nstd::cout << rez.first << \" \" << rez.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "1.56713 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 154,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT30 - TanhSinh integration - 7\nauto rez = TanhSinhIntegration([](double x) { return log(fabs(x - 1)); }, 0, 1, 1e-8, 1000000);\nstd::cout << rez.first << \" \" << rez.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-1 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 155,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT31 - TanhSinh integration - 8\nauto rez = TanhSinhIntegration([](double x) { return log(fabs(x - 1)); }, 0, 2, 1e-8, 1000);\nstd::cout << rez.first << \" \" << rez.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-1.87805 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 156,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT32 - TanhSinh integration - 9\nauto rez = TanhSinhIntegration([](double x) { return log(fabs(x - 1)); }, 0, 2, 1e-4, 10000);\nstd::cout << rez.first << \" \" << rez.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-1.98866 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 157,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT33 - TanhSinh integration - 10\nauto rez = TanhSinhIntegration([](double x) { return log(fabs(x - 1)); }, 0, 2, 1e-4, 1000000);\nstd::cout << rez.first << \" \" << rez.second;",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "-1.99974 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 158,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT34 -  TanhSinh integration - Izuzetak 1\ntry\n{\nauto rez = TanhSinhIntegration([](double x) { return log(fabs(x - 1)); }, 0, 1, -10, 1000000);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 159,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT35 -  TanhSinh integration - Izuzetak 2\ntry\n{\nauto rez = TanhSinhIntegration([](double x) { return log(fabs(x - 1)); }, 0, 1, 1e-10, -100);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 160,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT36 -  TanhSinh integration - Izuzetak 3\ntry\n{\nauto rez = TanhSinhIntegration([](double x) { return log(fabs(x - 1)); }, 0, 1, 1e-10, 100,-10);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 161,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT37 -  TanhSinh integration - Izuzetak 4\ntry\n{\nauto rez = TanhSinhIntegration([](double x) { return log(fabs(x - 1)); }, 0, 1, 1e-10, 100,10,-3.5);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 162,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "\/\/AT38 -  TanhSinh integration - Izuzetak 5\ntry\n{\nauto rez = TanhSinhIntegration([](double x) { return log(fabs(x - 1)); }, 0, 1, 1e-10, 10,100);\n}\ncatch (std::domain_error e)\n{\nstd::cout << \"'\" << e.what() << \"'\";\n}\ncatch (...)\n{\nstd::cout << \"Pogresan tip izuzetka\";\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Bad parameter'"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        }
    ]
}