{
    "id": 9301,
    "name": "Tehnike programiranja (2016\/2017), Zada\u0107a 3, zadatak 1",
    "language": "C++",
    "required_compiler": "g++",
    "preferred_compiler": "g++",
    "compiler_features": [

    ],
    "compiler_options": "-std=c++11 -O1 -Wall -Wuninitialized -Winit-self -Wfloat-equal -Wno-sign-compare -Werror=implicit-function-declaration -Werror=vla -pedantic -lm -pass-exit-codes",
    "compiler_options_debug": "-std=c++11 -ggdb -lm -pass-exit-codes",
    "compile": "true",
    "run": "false",
    "test": "true",
    "debug": "true",
    "profile": "true",
    "test_specifications": [
        {
            "id": 53,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "{\/\/AT1 (c9): primjer iz postavke zadatka (1.1)\n    auto fun = BaricentricnaInterpolacija({{1, 3}, {2, 5}, {4, 4}, {5, 2}, {7, 1}}, 2);\n    std::cout << \"fun (2.5) = \" << fun (2.5);\n}\/\/fun (2.5) = 5.425",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "fun (2.5) = 5.425"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 54,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "{\/\/AT2 (c9): primjer iz postavke zadatka (2.1)\n    auto fun = BaricentricnaInterpolacija(xxsinx, 0, 1, 0.1, 2);\n    std::cout << \"fun (0.3) = \" << fun (.3);\n}\/\/fun (0.3) = 0.38552",
            "global_above_main": "#include <cmath>\ndouble xxsinx (double x) {return x * x + std::sin(x);}",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "fun (0.3) = 0.38552"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 55,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "{\/\/AT3 (c9): primjer iz postavke zadatka* (1.1)\n    auto fun = BaricentricnaInterpolacija({{1, 3}, {2, 5}, {4, 4}, {5, 2}, {7, 1}}, 2);\n    double tacke[] = {2.5, 4, 5.32};\n    for (const auto &i : tacke)\n        std::cout << \"fun (\" << i << \") = \" << fun (i) << std::endl;\n}\/\/fun (2.5) = 5.425\n\/\/fun (4) = 4\n\/\/fun (5.32) = 1.47372",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "fun (2.5) = 5.425\nfun (4) = 4\nfun (5.32) = 1.47372"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 56,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "{\/\/AT4 (c9): primjer iz postavke zadatka (2.2)\n    auto fun = BaricentricnaInterpolacija(xxsinx, 0, 1, 0.1, 2);\n    double tacke[] = {0.3, 0.57, 5};\n    for (const auto &i : tacke)\n        std::cout << \"fun (\" << i << \") = \" << fun (i) << std::endl;\n}\/\/fun (0.3) = 0.38552\n\/\/fun (0.57) = 0.864515\n\/\/fun (5) = 24.289",
            "global_above_main": "#include <cmath>\ndouble xxsinx (double x) {return x * x + std::sin(x);}",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "fun (0.3) = 0.38552\nfun (0.57) = 0.864515\nfun (5) = 24.289"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 57,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "{\/\/AT5 (c9): test maina (1\/3)\n    _main();\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": "1\n5\n1 3\n2 5\n4 4\n5 2\n7 1\n2\n2.5\n4\n5.32\nkraj\n"
            },
            "expected": [
                "Odaberite opciju (1 - unos cvorova, 2 - aproksimacija): Unesite broj cvorova: Unesite cvorove kao parove x y: Unesite red interpolacije: Unesite argument (ili \"kraj\" za kraj): f(2.5) = 5.425\nUnesite argument (ili \"kraj\" za kraj): f(4) = 4\nUnesite argument (ili \"kraj\" za kraj): f(5.32) = 1.47372\nUnesite argument (ili \"kraj\" za kraj): "
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 58,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "{\/\/AT6 (c9): test maina (2\/3)\n    _main();\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": "2\n0 1 0.1\n2\n0.3\n0.57\n5\nkraj\n"
            },
            "expected": [
                "Odaberite opciju (1 - unos cvorova, 2 - aproksimacija): Unesite krajeve intervala i korak: Unesite red interpolacije: Unesite argument (ili \"kraj\" za kraj): f(0.3) = 0.38552 fapprox(0.3) = 0.38552\nUnesite argument (ili \"kraj\" za kraj): f(0.57) = 0.864532 fapprox(0.57) = 0.864515\nUnesite argument (ili \"kraj\" za kraj): f(5) = 24.0411 fapprox(5) = 24.289\nUnesite argument (ili \"kraj\" za kraj): "
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 59,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "{\/\/AT7 (c9): test maina (2\/3) (prekid necim sto nije 'kraj')\n \/\/aproksimacija bi trebala biti dobra! (d = 4, korak 0.05)\n    _main();\n}",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": "2\n0 1 0.05\n4\n1\n2\n3\n4\n5\n0.3\n0.57\n-2\n-4\n-7\n-0.7\n0.1\n0.2\n0.333\nTP\n"
            },
            "expected": [
                "Odaberite opciju (1 - unos cvorova, 2 - aproksimacija): Unesite krajeve intervala i korak: Unesite red interpolacije: Unesite argument (ili \"kraj\" za kraj): f(1) = 1.84147 fapprox(1) = 1.84147\nUnesite argument (ili \"kraj\" za kraj): f(2) = 4.9093 fapprox(2) = 4.91588\nUnesite argument (ili \"kraj\" za kraj): f(3) = 9.14112 fapprox(3) = 9.34906\nUnesite argument (ili \"kraj\" za kraj): f(4) = 15.2432 fapprox(4) = 17.0272\nUnesite argument (ili \"kraj\" za kraj): f(5) = 24.0411 fapprox(5) = 32.4627\nUnesite argument (ili \"kraj\" za kraj): f(0.3) = 0.38552 fapprox(0.3) = 0.38552\nUnesite argument (ili \"kraj\" za kraj): f(0.57) = 0.864532 fapprox(0.57) = 0.864532\nUnesite argument (ili \"kraj\" za kraj): f(-2) = 3.0907 fapprox(-2) = 3.12192\nUnesite argument (ili \"kraj\" za kraj): f(-4) = 16.7568 fapprox(-4) = 15.5912\nUnesite argument (ili \"kraj\" za kraj): f(-7) = 48.343 fapprox(-7) = -19.1548\nUnesite argument (ili \"kraj\" za kraj): f(-0.7) = -0.154218 fapprox(-0.7) = -0.153751\nUnesite argument (ili \"kraj\" za kraj): f(0.1) = 0.109833 fapprox(0.1) = 0.109833\nUnesite argument (ili \"kraj\" za kraj): f(0.2) = 0.238669 fapprox(0.2) = 0.238669\nUnesite argument (ili \"kraj\" za kraj): f(0.333) = 0.437769 fapprox(0.333) = 0.437769\nUnesite argument (ili \"kraj\" za kraj): "
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 60,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "{\/\/AT8 (c9): parovi x^3 funkcije\n    std::vector<std::pair<double, double>> pairs = {\n        {-1, -1}, {-0.9, -0.729}, {-0.8, -0.512},\n        {-0.7, -0.343}, {-0.6, -0.216}, {-0.5, -0.125},\n        {-0.4, -0.064}, {-0.3, -0.027}, {-0.2, -0.008},\n        {-0.1, -0.001}, {0, 0},\n        {0.1, 0.001}, {0.2, 0.008}, {0.3, 0.027},\n        {0.4, 0.064}, {0.5, 0.125}, {0.6, 0.216},\n        {0.7, 0.343}, {0.8, 0.512}, {0.9, 0.729}, {1, 1}\n    };\n    auto fun = BaricentricnaInterpolacija(pairs, 3);\n    for (double i = -2; i <= 2; i += 0.35)\n        std::cout << \"fun (\" << i << \") = \", std::cout.precision(4), std::cout << std::fixed << fun (i) << std::endl;\n}\n",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "fun (-2) = -8.0000\nfun (-1.6500) = -4.4921\nfun (-1.3000) = -2.1970\nfun (-0.9500) = -0.8574\nfun (-0.6000) = -0.2160\nfun (-0.2500) = -0.0156\nfun (0.1000) = 0.0010\nfun (0.4500) = 0.0911\nfun (0.8000) = 0.5120\nfun (1.1500) = 1.5209\nfun (1.5000) = 3.3750\nfun (1.8500) = 6.3316"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        }
    ]
}